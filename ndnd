#!/usr/bin/env python

# TODO:
# * The window need to open in the right most upper corner
#   (below the panel) above all the over windows, including the PhoneApp.
# * The window should not allow changes to its location by the user.

############################################
# Logging
############################################
import logging, sys, os
from datetime import datetime, timedelta

progname = os.path.basename(sys.argv[0])
def _init_log():
    name = progname
    log = logging.getLogger(name)
    log.setLevel(logging.INFO)
    # log.setLevel(logging.DEBUG)
    h = logging.StreamHandler()
    f = logging.Formatter("%(name)s (%(funcName)s:%(lineno)d) :: %(message)s")
    # f = logging.Formatter("%(message)s")
    h.setFormatter(f)
    log.addHandler(h)
    return log

log = _init_log()

############################################
# Argument parsing
############################################
import argparse
desc = '''Non Disturbing Notification Daemon'''
p = argparse.ArgumentParser(description=desc)
p.add_argument("--debug", help="debug mode", action="store_true")

args = p.parse_args()
if args.debug:
    log.setLevel(logging.DEBUG)

log.debug("Args: %s", args)

import dbus, gtk, gobject,  pango, urllib, urlparse, glib
import dbus.service
from dbus.mainloop.glib import DBusGMainLoop
import signal


#######################################################################
# DBus                                                                #
#######################################################################

class MyDBUSService(dbus.service.Object):
    _id = 0

    def __init__(self, notify_cb, close_cb, data):
        self.notify_cb = notify_cb
        self.close_cb = close_cb
        self.data = data
        bus_name = dbus.service.BusName(
            'org.freedesktop.Notifications',
            bus=dbus.SessionBus())
        dbus.service.Object.__init__(self, bus_name,
            '/org/freedesktop/Notifications')


    def pb_from_data(self, data):
        w = data[0]
        h = data[1]
        r = data[2]
        a = bool(data[3])
        b = data[4]
        c = data[5]
        d = data[6]
        d = "".join(chr(b) for b in d)
        try:
            return gtk.gdk.pixbuf_new_from_data(d,
                gtk.gdk.COLORSPACE_RGB, a, b, w, h, r)
        except:
            return None



    @dbus.service.method("org.freedesktop.Notifications",
                         in_signature='susssasa{ss}i',
                         out_signature='u',
                         sender_keyword='sender')
    def Notify(self, name, notification_id, icon,
               summary, body, actions, hints, tout, sender):

        log.debug("id %d, icon %s", notification_id, icon)
        if notification_id == 0:
            self._id += 1
            notification_id = self._id

        msg = {
            'id' : notification_id,
            'name' : name,
            'summary' : summary,
            'body' : body,
            'actions' : actions,
            'hints' : hints,
            'tout' : tout,
            'sender' : sender
        }

        # urgency
        try:
            msg['urgency'] = int(hints['urgency'])
            del(hints['urgency'])
        except:
            msg['urgency'] = 0

        # icon
        if 'image-data' in hints:
            msg['pixbuf'] = self.pb_from_data(hints['image-data'])
            log.debug("got image-data, converted to %s", msg['pixbuf'])
            del(hints['image-data'])
        elif 'icon_data' in hints:
            msg['pixbuf'] = self.pb_from_data(hints['icon_data'])
            log.debug("got icon_data, converted to %s", msg['pixbuf'])
            del(hints['icon_data'])
        else:
            msg['pixbuf'] = None

        if 'image-path' in hints:
            msg['icon'] = hints['image-path']
            del(hints['image-path'])
        else:
            msg['icon'] = icon

        self.notify_cb(self.data, msg)

        return notification_id


    @dbus.service.method("org.freedesktop.Notifications",
                         in_signature='u',
                         out_signature='')
    def CloseNotification(self, notification_id):
        self.close_cb(self.data, notification_id)


    @dbus.service.method("org.freedesktop.Notifications",
                         in_signature='', out_signature='ssss')
    def GetServerInformation(self):
        log.debug("GetServerInformation")
        return ("statnot", "http://code.k2h.se", "0.0.2", "1")


    def NotificationClosed(self, id, reason, dbus_dest):
        sig = dbus.lowlevel.SignalMessage(
            '/org/freedesktop/Notifications',
            'org.freedesktop.Notifications',
            'NotificationClosed')
        sig.set_destination(dbus_dest)
        sig.append(dbus.UInt32(id))
        sig.append(dbus.UInt32(reason))
        self.connection.send_message(sig)


#######################################################################
# Misc                                                                #
#######################################################################

def str_from_timedelta(ts1, ts2):

    def past(d):
        if d.days >= 365:
            return '%d years ago' % (d.days / 365)
        elif d.days >= 31:
            return '%d months ago' % (d.days / 31)
        elif d.days >= 1:
            return '%d months ago' % (d.days)
        elif d.seconds >= 3600:
            return '%d hours ago' % (d.seconds / 3600)
        elif d.seconds >= 60:
            return '%d mins ago' % (d.seconds / 60)
        # elif d.seconds >= 20:
        #     return '%d sec ago' % (d.seconds)
        else:
            return 'just now'


    def future(d):
        if d.days >= 365:
            return 'in %d years' % (d.days / 365)
        elif d.days >= 31:
            return 'in %d months' % (d.days / 31)
        elif d.days >= 1:
            return 'in %d months' % (d.days)
        elif d.seconds >= 3600:
            return 'in %d hours' % (d.seconds / 3600)
        elif d.seconds >= 60:
            return 'in %d mins' % (d.seconds / 60)
        # elif d.seconds >= 20:
        #     return 'in %d secs' % (d.seconds)
        else:
            return 'just now'

    # log.debug('ts1 %s', ts1)
    # log.debug('ts2 %s', ts2)
    diff = ts1 - ts2
    if diff.total_seconds() < 0:
        s = past(-diff)
    else:
        s = future(diff)

    return s



#######################################################################
# GUI                                                                 #
#######################################################################

main_win_min_height = 420
main_win_width = 400
float_win_width = 600


def gui_msg_text(msg):
    l = gtk.Label('')
    msum = ' '.join(msg['summary'].strip().split())
    msum = glib.markup_escape_text(msum)
    mbody = ' '.join(msg['body'].strip().split())
    mbody = glib.markup_escape_text(mbody)
    m = '<b>%s</b>\n%s' % (msum, mbody)
    l.set_markup(m)
    l.set_justify(gtk.JUSTIFY_LEFT)
    l.set_alignment(0.0, 0.0)
    l.set_padding(0, 0)
    # l.set_single_line_mode(True)
    l.set_line_wrap(False)
    l.set_ellipsize(pango.ELLIPSIZE_END)
    return l


def pixbuf_scale_with_ratio(pb, size):
    log.debug("%s", pb)
    w = float(pb.get_width())
    h = float(pb.get_height())
    log.debug("pb orig size %f %f", w, h)
    if w != size:
        wr = 1.0 * w / size
    else:
        wr = 1.0
    if h != size:
        hr = 1.0 * h / size
    else:
        hr = 1.0
    r = max(wr, hr)
    w = w / r
    h = h / r
    log.debug("scaling pb to %f %f", w, h)
    return pb.scale_simple(int(w), int(h), gtk.gdk.INTERP_BILINEAR)



def gui_msg_image(msg):
    size = 32
    pb = msg['pixbuf']
    log.debug("%s", pb)
    if pb:
        try:
            pb = pixbuf_scale_with_ratio(pb, size)
            log.debug("%s", pb)
            return gtk.image_new_from_pixbuf(pb)
        except Exception, e:
            print e

    icon_theme = gtk.icon_theme_get_default()
    icon = msg['icon'].strip()

    if icon[0:1] == '/':
        try:
            fname = urllib.unquote(urlparse.urlparse(icon).path)
            pb = gtk.gdk.pixbuf_new_from_file_at_size(fname, size, size)
            return gtk.image_new_from_pixbuf(pb)
        except:
            pass

    try:
        pb = icon_theme.load_icon(icon, size, 0)
    except:
        pb = icon_theme.load_icon('info', size, 0)
    return gtk.image_new_from_pixbuf(pb)




def gui_msg_ts(msg):
    l = gtk.Label('')
    msg['widget_ts'] = l
    l.set_justify(gtk.JUSTIFY_LEFT)
    l.set_alignment(0.0, 0.5)
    msg['ts'] = datetime.now()
    m = '<i>%s</i>' % str_from_timedelta(msg['ts'], msg['ts'])
    l.set_markup(m)
    return l


def gui_run_cmd(b, cmd):
    try:
        cmd += " &"
        log.debug('run %s', cmd)
        os.system(cmd)
    except Exception, e:
        log.warning("cmd '%s' failed, %s", cmd, e)


def gui_msg_action_menu(msg):
    log.debug("here")
    def popup(menu, event):
        if event.type == gtk.gdk.BUTTON_PRESS:
            menu.popup(None, None, None, event.button, event.time)
            return True
        return False
    
    hints = msg['hints']
    log.debug("hints %s", hints)
    menu = gtk.Menu()
    for i in range(1,10):
        tk = 'action_title%d' % i
        ck = 'action_cmd%d' % i
        log.debug("key %s, inside %s", ck, ck in hints)
        log.debug("key %s, inside %s", tk, tk in hints)
        if tk not in hints or ck not in hints:
            break
        log.debug("mi %d: %s %s", i, hints[tk], hints[ck])
        mi = gtk.MenuItem(hints[tk])
        mi.connect("activate", gui_run_cmd, hints[ck])
        mi.show()
        menu.append(mi)
        
    ba = gtk.Button()
    ba.set_name("action")
    # ba.set_can_focus(False)
    label = gtk.Label(hints['action_title'])
    ar = gtk.Arrow(gtk.ARROW_DOWN, gtk.SHADOW_NONE)
    hb = gtk.HBox(False, 4)
    hb.pack_start(label, False, False, 0)
    hb.pack_start(ar, False, False, 0)
    ba.add(hb)
    ba.connect_object("event", popup, menu)
    return ba


def gui_msg_action_button(msg):
    ba = gtk.Button()
    ba.set_name("action")
    # ba.set_can_focus(False)
    ba.set_label(msg['hints']['action_title1'])
    if 'action_cmd1' in msg['hints']:
        ba.connect('clicked', gui_run_cmd, msg['hints']['action_cmd1'])
    return ba


def gui_nmsg_close(msg):
    ix = gtk.Image()
    ix.set_from_stock(gtk.STOCK_CLOSE, gtk.ICON_SIZE_MENU)
    ix.set_alignment(0.5, 0.5)
    ix.set_padding(0, 0)
    bx = gtk.Button()
    bx.set_name("close-btn")
    bx.set_image(ix)
    bx.set_border_width(0)
    bx.set_relief(gtk.RELIEF_NONE)
    # bx.set_can_focus(False)
    bx.connect_object('clicked', msg_del, msg)
    a = gtk.Alignment(0.0, 0.0)
    a.add(bx)
    return a


def gui_nmsg_action(msg):
    if 'action_title' in msg['hints']:
        ba = gui_msg_action_menu(msg)
    elif 'action_title1' in msg['hints']:
        ba = gui_msg_action_button(msg)
    else:
        return None
    a = gtk.Alignment(0.0, 0.5)
    a.add(ba)
    xx['sg'].add_widget(ba)
    return a


def gui_nmsg(msg):
    log.debug("here")
    hbox = gtk.HBox(False, 0)
    
    w = gui_msg_image(msg)
    w.set_alignment(0.5, 0.0)
    w.set_padding(0, 3)
    hbox.pack_start(w, False, False, 10)

    vbox = gtk.VBox(False, 0)
    w = gui_msg_text(msg)
    w.set_alignment(0.0, 0.0)
    vbox.pack_start(w)
    w = gui_msg_ts(msg)
    w.set_alignment(0.0, 0.5)
    vbox.pack_start(w, False, False, 0)
    hbox.pack_start(vbox)

    w = gui_nmsg_action(msg)
    if w:
        hbox.pack_start(w, False, False, 10)

    w = gui_nmsg_close(msg)
    # w.set_alignment(0.0, 0.0)
    hbox.pack_start(w, False, False, 0)

    w = gtk.HSeparator()

    vbox = gtk.VBox(False, 0)
    vbox.pack_start(hbox)
    vbox.pack_start(w, False, False, 0)
    vbox.show_all()
    vbox.set_name("notification")
    
    return vbox
    


#######################################################################
# Main                                                                #
#######################################################################

def msg_upd():
    stat = {
        0: 0,
        1: 0,
        2: 0,
        'high': -1,
    }
    for m in xx['msgs']:
        u = m['urgency']
        if u < 0:
            log.warning("BUG: msg's urgency %d", u)
            u = 0
        elif u > 2:
            log.warning("BUG: msg's urgency %d", u)
            u = 2
        stat[u] += 1
        if stat['high'] < u:
            stat['high'] = u
    xx['stat'] = stat
    
    if xx['main']:
        gui_main_upd()
    gui_si_upd()

    
def msg_del_one(msg):
    xx['dbus'].NotificationClosed(msg['id'], 1, msg['sender'])
    xx['msgs'].remove(msg)

    
def msg_del(msg):
    msg_del_one(msg)
    msg_upd()

    
def msg_del_by_urgency(wd):
    def msg_del_by_urgency_real(urgency):
        i = 0
        for m in list(xx['msgs']):
            log.debug("msg urgency %s", m['urgency'])
            if m['urgency'] != urgency:
                continue
            msg_del_one(m)
            i += 1
        log.debug("del %d %s notification(s)", i, urgency)
        return i

    for u in [0, 1, 2]:
        if msg_del_by_urgency_real(u):
            break

    msg_upd()
    

def msg_add(wd, msg):
    # if it's an update, delete prev one
    for m in xx['msgs']:
        if m['id'] == msg['id']:
            xx['msgs'].remove(m)
            break

    xx['msgs'].insert(0, msg)
    msg_upd()


def msg_close(wd, msgid):
    log.debug("req to del a notification %d", msgid)
    for m in wd['msgs']:
        if m['id'] == msgid:
            msg_del(m)
            break


def update_ts_delta(wd):
    now = datetime.now()
    for msg in wd['msgs']:
        m = '<i>%s</i>' % str_from_timedelta(msg['ts'], now)
        msg['widget_ts'].set_markup(m)
    return True


xwd = None


IMG_DIR = 'images/'
xx = {
    'main': None,
    'msgs': [],
}



#######################################################################
# Main window                                                         #
#######################################################################

urg_str2num = {
    'low': 0,
    'normal': 1,
    'critical': 2,
}

urg_num2str = {
    0: 'low',
    1: 'normal',
    2: 'critical',
}


def gui_main_upd():
    if not xx['main']:
        return

    for w in xx['list'].get_children():
        w.destroy()
    for m in xx['msgs']:
        w = gui_nmsg(m)
        xx['list'].pack_start(w, False, False, 1)
    xx['list'].show_all()

    xx['clear'].set_sensitive(bool(len(xx['msgs'])))
    ttip = None
    for u in [0, 1, 2]:
        if not xx['stat'][u]:
            continue
        ttip = "Clear %d %s notifications" % \
               (xx['stat'][u], urg_num2str[u])
        break
    xx['clear'].set_tooltip_text(ttip)

    
    
def gui_main_list():
    l = gtk.VBox(False, 0)
    xx['list'] = l
    return l


def gui_main_toolbar():
    tb = gtk.Toolbar()
    xx['toolbar'] = tb
    tb.set_style(gtk.TOOLBAR_ICONS)
    
    ti = gtk.ToolButton(gtk.STOCK_CLEAR)
    ti.connect("clicked", msg_del_by_urgency)
    tb.insert(ti, 0)
    xx['clear'] = ti
    
    ti = gtk.ToolButton(gtk.STOCK_PREFERENCES)
    tb.insert(ti, 1)

    tb.show_all()
    return tb

def gui_main_pos(w):
    si = xx['statusicon']
    g = si.get_geometry()[1]
    log.debug("geom %s", g)
    scr = si.get_screen()
    p = (scr.get_width(), scr.get_height())
    log.debug("screen %s", p)
    w.move(g[0], g[1])

    
def gui_main():
    w = gtk.Window(gtk.WINDOW_TOPLEVEL)
    xx['main'] = w
    w.set_title("Notifications")
    w.set_name("ndnd")
    w.set_decorated(False)
   
    w.set_default_size(main_win_width, main_win_min_height)
    w.set_resizable(True)
    w.set_geometry_hints(w, min_width=main_win_width,
        min_height=main_win_min_height)
    w.set_keep_above(True)
    w.set_focus_on_map(False)
    # gui_set_geom(w, wd)
    # w.set_geometry_hints
  
    vbox = gtk.VBox(False, 0)
    sw = gtk.ScrolledWindow()
    sw.set_border_width(0)
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    sw.add_with_viewport(gui_main_list())
    vbox.pack_start(sw, True, True, 0)
    vbox.pack_start(gui_main_toolbar(), False, True, 0)
    xx['sg'] = gtk.SizeGroup(gtk.SIZE_GROUP_HORIZONTAL)
    w.add(vbox)
    gui_main_pos(w)
    w.show_all()

    return w


#######################################################################
# Status Icon                                                         #
#######################################################################

def gui_si_popup_menu_cb(si, button, time):
    menu = gtk.Menu()
    about = gtk.ImageMenuItem(gtk.STOCK_ABOUT)
    quit = gtk.ImageMenuItem(gtk.STOCK_QUIT)
    about.connect("activate", gui_si_about_dialog)
    quit.connect("activate", gtk.main_quit)
    menu.append(about)
    menu.append(quit)
    menu.show_all()
    menu.popup(None, None, gtk.status_icon_position_menu,
               button, time, xx['statusicon'])

    
def gui_si_about_dialog(widget):
    about_dialog = gtk.AboutDialog()
    about_dialog.set_destroy_with_parent(True)
    about_dialog.set_name("ndnd")
    about_dialog.set_version("1.0")
    about_dialog.set_authors(["Anatoly Asviyan <aanatoly@gmail.com>"])
    about_dialog.run()
    about_dialog.destroy()

    
def gui_si_activate_cb(si):
    if xx['main'] and xx['main'].flags() & gtk.MAPPED:
        xx['main'].destroy()
        xx['main'] = None
    else:
        gui_main()
        msg_upd()


def gui_si_upd():
    log.debug("here")
    icons = {
        -1: "ndnd.png",
        0: "ndnd-urgency-low.png",
        1: "ndnd-urgency-normal.png",
        2: "ndnd-urgency-critical.png",
    }
    log.debug("stat %s", xx['stat'])
    icon = icons[xx['stat']['high']]
    xx['statusicon'].set_from_file(IMG_DIR + icon)
    ttip = ""
    for u in [2, 1, 0]:
        if not xx['stat'][u]:
            continue
        ttip += "%d %s\n" % (xx['stat'][u], urg_num2str[u])
    if not ttip:
        ttip = "nothing new"
    ttip = "Notofictions\n" + ttip
    xx['statusicon'].set_tooltip(ttip)

    
def gui_si():
    si = gtk.StatusIcon()
    xx['statusicon'] = si
    si.set_from_file(IMG_DIR + "ndnd.png")
    si.connect("popup-menu", gui_si_popup_menu_cb)
    si.connect("activate", gui_si_activate_cb)
    si.set_tooltip("Notofictions")

    
#######################################################################
# Main                                                                #
#######################################################################

    
def main():
    
    # wd = gui()
    # xwd = wd
    # msg_upd(wd)
    DBusGMainLoop(set_as_default=True)
    xx['dbus'] = MyDBUSService(msg_add, msg_close, xx)
    # gobject.timeout_add(5000, update_ts_delta, wd)
    gui_si()
    gtk.main()


main()

