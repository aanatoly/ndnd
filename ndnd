#!/usr/bin/env python

############################################
# Logging
############################################
import logging, sys, os
progname = os.path.basename(sys.argv[0])
def _init_log():
    name = progname
    x = logging.getLogger(name)
    x.setLevel(logging.INFO)
    # x.setLevel(logging.DEBUG)
    h = logging.StreamHandler()
    f = logging.Formatter("%(name)s (%(funcName)s:%(lineno)d) :: %(message)s")
    # f = logging.Formatter("%(message)s")
    h.setFormatter(f)
    x.addHandler(h)
    return x

x = _init_log()

############################################
# Argument parsing
############################################
import argparse
desc = '''Non Disturbing Notification Daemon'''
p = argparse.ArgumentParser(description=desc)
p.add_argument("--debug", help="debug mode", action="store_true")

args = p.parse_args()
if args.debug:
    x.setLevel(logging.DEBUG)

x.debug("Args: %s", args)

import dbus, gtk, pango, urllib, urlparse
import dbus.service
from dbus.mainloop.glib import DBusGMainLoop

    
class MyDBUSService(dbus.service.Object):
    _id = 0
    
    def __init__(self):
        bus_name = dbus.service.BusName(
            'org.freedesktop.Notifications',
            bus=dbus.SessionBus())
        dbus.service.Object.__init__(self, bus_name,
            '/org/freedesktop/Notifications')
        self.gui()
  
    @dbus.service.method("org.freedesktop.Notifications",
                         in_signature='susssasa{ss}i',
                         out_signature='u')
    def Notify(self, app_name, notification_id, app_icon,
               summary, body, actions, hints, tout):
        x.debug("here")
        if 'image-data' in hints:
            pb = pb_from_data(hints['image-data'])
        elif 'image-path' in hints:
            pb = pb_from_icon_name(hints['image-path'])
        elif app_icon:
            pb = pb_from_icon_name(app_icon)
        elif 'icon_data' in hints:
            pb = pb_from_data(hints['icon_data'])
        else:
            pb = None
        try:
            urgency = int(hints['urgency'])
        except:
            urgency = 0
        self._id += 1
        self.add_notification(self._id, summary, body, urgency, pb,
            app_name, tout)
        return self._id

  

    @dbus.service.method("org.freedesktop.Notifications",
                         in_signature='', out_signature='ssss')
    def GetServerInformation(self):
        x.debug("GetServerInformation")
        return ("statnot", "http://code.k2h.se", "0.0.2", "1")


    def gui(self):
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.set_title("ndnd")
        self.window.set_size_request(220, 220)
        self.window.connect("delete_event", self.delete_event)

        vbox = gtk.VBox(False, 5) 
        sw = gtk.ScrolledWindow()
        sw.set_policy(gtk.POLICY_NEVER, gtk.POLICY_AUTOMATIC)
        
        self.liststore = gtk.ListStore(
            int,            # id
            gtk.gdk.Pixbuf, # icon
            int,            # timeout
            int,            # urgency
            str,            # summary
            str,            # body
            str,            # sender app name
            str             # extra stuff, unused currently
        )
        self.COL_ID = 0
        self.COL_PB = 1
        self.COL_TOUT = 2
        self.COL_URGENCY = 3
        self.COL_SUMMARY = 4
        self.COL_BODY = 5
        self.COL_SENDER = 6

        self.treeview = gtk.TreeView(self.liststore)
        
        self.tvcolumn = gtk.TreeViewColumn('I')
        cr = gtk.CellRendererPixbuf()
        self.tvcolumn.pack_start(cr, False)
        self.tvcolumn.set_attributes(cr, pixbuf = self.COL_PB)
        self.treeview.append_column(self.tvcolumn)
        
        self.tvcolumn1 = gtk.TreeViewColumn('Msg')
        cr = gtk.CellRendererText()
        self.tvcolumn1.set_property('min-width', 150)
        self.tvcolumn1.pack_start(cr, True)
        self.tvcolumn1.set_cell_data_func(cr, self.render_msg)
        self.treeview.append_column(self.tvcolumn1)

        sw.add(self.treeview)
        vbox.pack_start(sw, True, True, 0)
        self.window.add(vbox)
        self.window.show_all()

        self.statusicon = gtk.StatusIcon()
        self.statusicon.set_from_stock(gtk.STOCK_HOME) 
        self.statusicon.connect("popup-menu", self.statusicon_right_click_event)
        self.statusicon.connect("activate", self.statusicon_activate_event)
        self.statusicon.set_tooltip("ndnd")

    def statusicon_activate_event(self, icon):
        if self.window.flags() & gtk.MAPPED:
            self.window.hide()
        else:
            self.window.show()
            
    def statusicon_right_click_event(self, icon, button, time):
        menu = gtk.Menu()

        about = gtk.MenuItem("About")
        quit = gtk.MenuItem("Quit")
        
        about.connect("activate", self.show_about_dialog)
        quit.connect("activate", gtk.main_quit)
        
        menu.append(about)
        menu.append(quit)
        
        menu.show_all()
        
        menu.popup(None, None, gtk.status_icon_position_menu,
                   button, time, self.statusicon)
        
    def show_about_dialog(self, widget):
        about_dialog = gtk.AboutDialog()

        about_dialog.set_destroy_with_parent(True)
        about_dialog.set_name("ndnd")
        about_dialog.set_version("1.0")
        about_dialog.set_authors(["Anatoly Asviyan <aanatoly@gmail.com>"])
        		
        about_dialog.run()
        about_dialog.destroy()
        
    def add_notification(self, id, summary, body, urgency, pb,
            sender, tout):
        x.debug("id %d", id)
        x.debug("'%s %s' from %s, urg %d, no %d, pb %dx%d",
                summary, body, sender, urgency, id,
                pb.get_width(), pb.get_height())
        try:
            self.liststore.append([id, pb, tout, urgency,
                                   summary, body, sender, ''])
        except Exception as e:
            print "err", e
        x.debug("note num %s", len(self.liststore))
        ttip = "ndnd"
        if len(self.liststore):
            ttip += "\n%s notifications" % len(self.liststore)
        self.statusicon.set_tooltip(ttip)
        
    def render_msg(self, column, cell, model, iter):
        s = model.get_value(iter, self.COL_SUMMARY)
        b = model.get_value(iter, self.COL_BODY)
        mup = "%s\n<i>%s</i>" % (s, b)
        cell.set_property('markup', mup)
        cell.set_property('wrap_width', column.get_width() - 10)
        cell.set_property('wrap_mode', pango.WRAP_WORD)
        # cell.set_property("ellipsize", pango.ELLIPSIZE_END)
        # cell.set_property("ellipsize-set", True)
        
    def delete_event(self, win):
        gtk.main_quit()
        
def pb_from_data(data):
    w = data[0]
    h = data[1]
    r = data[2]
    a = bool(data[3])
    b = data[4]
    c = data[5]
    d = data[6]
    d = "".join(chr(b) for b in d)
    return gtk.gdk.pixbuf_new_from_data(d,
        gtk.gdk.COLORSPACE_RGB, a, b, w, h, r)


def pb_from_icon_name(app_icon):
    icon_theme = gtk.icon_theme_get_default()
    try:
        pb = icon_theme.load_icon(app_icon, 24, 0)
        return pb
    except Exception as e:
        pass

    fname = urllib.unquote(urlparse.urlparse(app_icon).path)
    try:
        pb = gtk.gdk.pixbuf_new_from_file_at_size(fname, 24, 24)
        return pb
    except Exception as e:
        pass

    return None

    
DBusGMainLoop(set_as_default=True)
myservice = MyDBUSService()

gtk.main()


# Test with
# notify-send -a "sababa" --icon=battery-good  \
#    Test "Battery is normal" -h string:vasya:34 -u low
